alias physicalsp S0;
physicalsp=([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias syscallno S1;
syscallno=[physicalsp-1];


alias currentPID S2;
alias currentPCB S3;
alias currl S4;

alias newphysicalsp S5;

alias wpid S6;
alias pid S7;

alias swof_in S12;

alias fileno S14;

alias i S15;



print"in int 7";
	///exit system call
if(syscallno==10)then
	
	currentPID = (PTBR - 1024) / 8;
	
	
	currentPCB = READY_LIST + 32 * currentPID;
	
	
	pid=0;
	while(pid<32)do	/////signaling all process which are waiting for this
	
		if([READY_LIST+pid*32+1]==100+currentPID)then
			[READY_LIST+pid*32+1]=1;
		endif;
		pid=pid+1;
	endwhile;
	


	

	[ currentPCB + 1 ] = 0; // Set STATE to terminated
	
	[ currentPCB + 2 ] = 0;
	[ currentPCB + 3 ] = 0; 
	
//	alias physicalSP S2;
	physicalsp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	
	[ currentPCB + 4 ] =0; // Save IP of current process in the PCB from the stack
	
	[ currentPCB + 5 ] = 0;
	[ currentPCB + 6 ] = 0 ;
	
	[ currentPCB + 7 ] = 0;
	[ currentPCB + 8 ] = 0;
	[ currentPCB + 9 ] = 0;
	[ currentPCB + 10 ] =0;
	[ currentPCB +11 ] = 0;
	[ currentPCB + 12 ] =0;
	[ currentPCB + 13 ] = 0;
	[ currentPCB + 14 ] = 0;
	
	//have to close opened files in current process
	
	
	
	
	i=15;
	while(i<30)do
		if([currentPCB+i]!=-1)then
			
		fileno=(i-15)/2;
		
		
			
			swof_in=[currentPCB+i];
			////setting necessary changes in swof....what if swaf count =0 before decreasing
			[1344+swof_in*2+1]=[1344+swof_in*2+1]-1;
			if([1344+swof_in*2+1]==0)then
				[1344+swof_in*2]=-1;
			endif;
			////setting per process open file of given file to -1
			
			[READY_LIST+currentPID*32+15+fileno*2]=-1;////[currentPCB+i]=-1;
			[READY_LIST+currentPID*32+15+fileno*2+1]=-1;
			//[physicalsp-2]=0;
		endif;
	i=i+2;
	
	endwhile;
	
	//integer status;

//	while

	i=PTBR;
	
	while(i<PTBR+8)do
		if([i+1]=="01"||[i+1]=="11")then
//breakpoint;
			[MEM_LIST+[i]]=0;
		endif;
		[i]=-1;
		[i+1]="00";
		i=i+2;
	endwhile;




///wait --

// continuing commands from here for wait syscall .
print("continue");
	breakpoint;
	
////wait ---
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	
	currl=currentPCB+32;
	
	if(currl>2559) then
	currl=READY_LIST;
	endif;
	
	
	
	//print"---";
	while([currl +1] !=1&&currl!=currentPCB) do
	
		currl=currl+32;
		if(currl>2559) then
			currl=READY_LIST;
			endif;	
	endwhile;

	
	if(currl==currentPCB)then
		
		halt;
		//ireturn;
	endif;
	
	
	BP=[currl+2];
	SP=[currl+3];
	PTBR=[currl+5];
	PTLR=[currl+6];
	
	R0=[currl+7];
	R1=[currl+8];
	R2=[currl+9];
	R3=[currl+10];
	R4=[currl+11];
	R5=[currl+12];
	R6=[currl+13];
	R7=[currl+14];
	
	SP=SP+1;			// before ireturn IP value must be stored in top of stack
	
	
	newphysicalsp = ([PTBR+2*(SP/512)]*512)+(SP%512);
	[newphysicalsp]=[currl+4];
	
	[currl+1]=2;	
	
	//print"^^^^";
	//breakpoint;
	//breakpoint;
	ireturn;
endif;


if(syscallno==13)then//wait sys call
	
	wpid=[physicalsp-3];
	
	print(wpid);
	print("setting to wait");
	
	if([READY_LIST+wpid*32+1]==0||[READY_LIST+wpid*32+1]==2)then
		[physicalsp-2]=-1;//if wpid process is in running or terminated
		ireturn;
	endif;
	
	[physicalsp-2]=0;
	
	
//	alias currentPID S2;
	currentPID = (PTBR - 1024) / 8;
	[READY_LIST+currentPID*32+1]=100+wpid;
	
	
	
	
//	alias currentPCB S3;
currentPCB = READY_LIST + 32 * currentPID;

[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1; 

//alias physicalSP S2;
physicalsp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

[ currentPCB + 4 ] = [ physicalsp ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR ;

[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB +11 ] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7;
	
	
	
	
	
	
	///jump using inline
	inline "JMP 12200";
	ireturn;
	
endif;
	

//change last part of exit 
//copy exit code of scheduler here


if(syscallno==14)then	//signal syscall
//	alias pid S7;
//	alias currentPID S2;
	currentPID = (PTBR - 1024) / 8;
	pid=0;
	while(pid<32)do
		if([READY_LIST+pid*32+1]==100+currentPID)then
			[READY_LIST+pid*32+1]=1;
		endif;
		pid=pid+1;
	endwhile;
	[physicalsp-2]=0;	//sucess
	ireturn;
	///check when in reaches -1(failure);
	
endif;







ireturn;




